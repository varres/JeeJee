// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.p0rn.entities;

import ee.itcollege.p0rn.entities.SeadusePunkt;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SeadusePunkt_Roo_Entity {
    
    declare @type: SeadusePunkt: @Entity;
    
    @Version
    @Column(name = "version")
    private Integer SeadusePunkt.version;
    
    public Integer SeadusePunkt.getVersion() {
        return this.version;
    }
    
    public void SeadusePunkt.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void SeadusePunkt.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void SeadusePunkt.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            SeadusePunkt attached = SeadusePunkt.findSeadusePunkt(this.seaduse_punkt_ID);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void SeadusePunkt.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void SeadusePunkt.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public SeadusePunkt SeadusePunkt.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        SeadusePunkt merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static long SeadusePunkt.countSeadusePunkts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM SeadusePunkt o", Long.class).getSingleResult();
    }
    
    public static List<SeadusePunkt> SeadusePunkt.findAllSeadusePunkts() {
        return entityManager().createQuery("SELECT o FROM SeadusePunkt o", SeadusePunkt.class).getResultList();
    }
    
    public static SeadusePunkt SeadusePunkt.findSeadusePunkt(Long seaduse_punkt_ID) {
        if (seaduse_punkt_ID == null) return null;
        return entityManager().find(SeadusePunkt.class, seaduse_punkt_ID);
    }
    
    public static List<SeadusePunkt> SeadusePunkt.findSeadusePunktEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM SeadusePunkt o", SeadusePunkt.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
