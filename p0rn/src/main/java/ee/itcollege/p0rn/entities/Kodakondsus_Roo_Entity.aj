// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.p0rn.entities;

import ee.itcollege.p0rn.entities.Kodakondsus;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Kodakondsus_Roo_Entity {
    
    declare @type: Kodakondsus: @Entity;
    
    @Version
    @Column(name = "version")
    private Integer Kodakondsus.version;
    
    public Integer Kodakondsus.getVersion() {
        return this.version;
    }
    
    public void Kodakondsus.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Kodakondsus.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Kodakondsus.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Kodakondsus attached = Kodakondsus.findKodakondsus(this.kodakondsus_ID);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Kodakondsus.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Kodakondsus.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Kodakondsus Kodakondsus.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Kodakondsus merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static long Kodakondsus.countKodakondsuses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Kodakondsus o", Long.class).getSingleResult();
    }
    
    public static List<Kodakondsus> Kodakondsus.findAllKodakondsuses() {
        return entityManager().createQuery("SELECT o FROM Kodakondsus o", Kodakondsus.class).getResultList();
    }
    
    public static Kodakondsus Kodakondsus.findKodakondsus(Long kodakondsus_ID) {
        if (kodakondsus_ID == null) return null;
        return entityManager().find(Kodakondsus.class, kodakondsus_ID);
    }
    
    public static List<Kodakondsus> Kodakondsus.findKodakondsusEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Kodakondsus o", Kodakondsus.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
